#set( $packagePath = $TemplateStringUtility.replaceAllIn(${classDescriptor.package}, ".", "/") ) 

@TargetFileName ${classDescriptor.simpleName}Factory.java # Name of output file with extension but without path
@TargetDir $model.getMetaInfoValueFor("eclipseProjectDir")/$packagePath/factory
@CreateNew true # creates target dir if not existing and overwrites target file if existing 
@NameOfValidModel MOGLiCC_JavaBeanModel

package ${classDescriptor.package}.factory;
'
#parse("commonSubtemplates/importDomainModelClasses.tpl")
import java.util.*;

import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeFormat;
'
import ${classDescriptor.package}.${classDescriptor.simpleName};
import ${classDescriptor.package}.builder.${classDescriptor.simpleName}Builder;
import ${classDescriptor.package}.factory.${classDescriptor.simpleName}Factory;
import ${classDescriptor.package}.utils.*;
'
import org.apache.commons.lang.StringUtils;
'
/**
* Factory class of the MOGLiCC JavaBean Group.
* Creates ${classDescriptor.simpleName} instances with data for test purpose.
*
* @author generated by MOGLiCC
*/
public class ${classDescriptor.simpleName}Factory 
{
'	private final static DateTimeFormatter dateTimeFormatter = DateTimeFormat.forPattern("$model.getMetaInfoValueFor("dateTimeFormat")");
'
'	public static final int DEFAULT_MAX_LENGTH_STRING_VALUE = 1000;
'	public static final int DEFAULT_MAX_LENGTH_NUMBER_VALUE = 8;
'	public static final int DEFAULT_MIN_LENGTH_STRING_VALUE = 0;
'	public static final int DEFAULT_MIN_LENGTH_NUMBER_VALUE = 1;
'	public static final int NO_VALUE_AVAILABLE_IN_MODEL = -1;

#set( $useJavaBeanRegistry = $model.getMetaInfoValueFor("useJavaBeanRegistry") )

#if ( $useJavaBeanRegistry == "true")

'
'	private static final String REGISTRY_ID_MAX_FIELD_CONTENT = "${classDescriptor.simpleName}InstanceWithMaxFieldContent";
'	private static final String REGISTRY_ID_MIN_FIELD_CONTENT = "${classDescriptor.simpleName}InstanceWithMinFieldContent";

#end


'
'	static final HashMap<String, List<String>> dataPool = new HashMap<String, List<String>>();
'	static final HashMap<String, Integer> maxLengths = new HashMap<String, Integer>();
'	static final HashMap<String, Integer> minLengths = new HashMap<String, Integer>();
'
'	private static final String OBJECT_ID = "objectID";
'	private static final Random randomizer = new Random(new Date().getTime());
'
'  /**
'   * Returns value used by the MaxLengthValidator.
'   * @param fieldname name of a field of the ${classDescriptor.simpleName} class.
'   * @return value of the maximum field length allowed in the named field
'   */
'	public static Integer getMaxLength(final String fieldname)
'	{
'		final Integer toReturn = maxLengths.get(fieldname);
'		if (toReturn == null)
'		{
'			return NO_VALUE_AVAILABLE_IN_MODEL;
'		}
'		return maxLengths.get(fieldname);
'	}
'
'  /**
'   * Returns value used by the MinLengthValidator.
'   * @param fieldname name of a field of the ${classDescriptor.simpleName} class.
'   * @return value of the minimum field length allowed in the named field
'   */
'	public static Integer getMinLength(final String fieldname)
'	{
'		final Integer toReturn = minLengths.get(fieldname);
'		if (toReturn == null)
'		{
'			return NO_VALUE_AVAILABLE_IN_MODEL;
'		}
'		return minLengths.get(fieldname);
'	}
'	

#parse("B1_createInstanceWithAllFieldsAtMaxLength.tpl")

'

#parse("B2_createInstanceWithAllFieldsAtMinLength.tpl")

'	
'	/**
'	 * deletes all data except in mandatory fields
'	 */
'	public static void removeAllDataFromOptionalFields(final ${classDescriptor.simpleName} instance)
'	{
		#foreach($attributeDescriptor in $classDescriptor.attributeDescriptorList)
		
			#set( $AttributeName = $TemplateStringUtility.firstToUpperCase($attributeDescriptor.name) )
			#set( $Mandatory = $attributeDescriptor.getMetaInfoValueFor("Mandatory") )
		    #set( $javaType = $attributeDescriptor.getMetaInfoValueFor("JavaType") )
			 
		    #if ($Mandatory != "true")
		    
		    	#if ( $TemplateJavaUtility.isJavaMetaTypePrimitive($javaType) )
		    	
		    		#if ($javaType == "boolean")
		    		
						'		instance.set$AttributeName(false);
						
					#elseif ($javaType == "char")
					
						'		instance.set$AttributeName( '\u0000' );
					
					#elseif ($javaType == "byte")
					
						'		instance.set$AttributeName( (byte) 0 );
					
					#end
		    	
		    	#else
		    	
					'		instance.set$AttributeName(null);
					
				#end
		
			#end 
		#end
'	}
'
'   /**
'    * Removes from an instance created by the first address of the data pool all content of optional fields.
'    * @return ${classDescriptor.simpleName} object
'    */
'	public static ${classDescriptor.simpleName} createInstanceOnlyWithMandatoryFields()
'	{
'		final ${classDescriptor.simpleName} toReturn = createInstanceWithExampleData();
'		removeAllDataFromOptionalFields(toReturn);
'		return toReturn;
'	}

'
'   /**
'    * Creates all instances available in the data pool of this factory class.
'    * @return List of ${classDescriptor.simpleName} objects.
'    */
'	public static List<${classDescriptor.simpleName}> createAllFromDataPool()
'	{
'		final Object[] fields = dataPool.keySet().toArray();
'		final int poolSize = dataPool.get(fields[0]).size();
'		return createFirstFromDataPool( poolSize);
'	}
'	
'	/**
'	 * @param num number of ${classDescriptor.simpleName} objects to provide
'	 * @return the first <num> objects in the pool
'	 */
'	public static List<${classDescriptor.simpleName}> createFirstFromDataPool(final int num)
'	{
'		final int dataPoolNum = getNumberOfTestObjectsInDataPool();
'		if (num > dataPoolNum)
'		{
'			throw new RuntimeException("Error: Cannot provide " + num + " ${classDescriptor.simpleName} objects. Pool contains only " 
'                                      + dataPoolNum + " objects.");
'		}
'		
'		final List<${classDescriptor.simpleName}> toReturn = new ArrayList<${classDescriptor.simpleName}>();
'		for (int i = 0; i < num; i++) {
'			toReturn.add(buildObject(i));
'		}
'		
'		return toReturn;
'	}
'
'	/**
'	 * @param num index of ${classDescriptor.simpleName} object to provide
'	 * @return the (<index>+1)th object in the pool
'	 */
'	public static ${classDescriptor.simpleName} createByIndex(final int index)
'	{
'		final int dataPoolNum = getNumberOfTestObjectsInDataPool();
'		if (dataPoolNum == 0)
'		{
'			throw new RuntimeException("Cannot create any instance: Data pool is empty.");
'		}
'
'		if (index > dataPoolNum)
'		{
'			throw new RuntimeException("Error: Cannot provide the " + index + "th ${classDescriptor.simpleName} object. Pool contains only "
'                                     + dataPoolNum + " objects.");
'		}


		#set( $useJavaBeanRegistry = $model.getMetaInfoValueFor("useJavaBeanRegistry") )

		#if ( $useJavaBeanRegistry == "true" )

			'		
			'		final String objectId = getObjectIdFromIndex(index);
			'		if (MOGLiCCJavaBeanRegistry.isBeanRegistered(objectId))
			'		{
			'			return (${classDescriptor.simpleName}) MOGLiCCJavaBeanRegistry.getJavaBean(objectId);
			'		}
			'
		#end


'		return buildObject(index);
'	}
'
'	/**
'	 * @param id of wanted Person object 
'	 * @return Person object identified by its object id
'	 */
'	public static ${classDescriptor.simpleName} createById(final String objectId)
'	{
'		final int index = getIndexFromId(objectId);
'		
'		if (index == -1)
'		{
'			return null;
'		}
'		
'		return createByIndex(index);
'	}
'
'	/**
'	 * @return a randomly chosen object from the pool
'	 */
'	public static ${classDescriptor.simpleName} createRandomFromDataPool()
'	{
'		final int limit = getNumberOfTestObjectsInDataPool();
'		
'		if (limit <= 0)
'		{
'			return null;  // no data available
'		}
'		
'		final int index = randomizer.nextInt( limit );
'		return buildObject(index);
'	}
'

#parse("E_buildCutFieldContentMethod.tpl")

#parse("F_buildAddToFieldContentMethod.tpl")

'   // *************************************************************************
'   // ***************************  private methods  ***************************
'   // *************************************************************************
'
'	private static String getObjectIdFromIndex(int index)
'	{
'		return dataPool.get( OBJECT_ID ).get(index);
'	}
'
'	private static int getIndexFromId(final String objectId)
'	{
'		final List<String> ids = dataPool.get( OBJECT_ID );
'		if (ids.size() == 0)
'		{
'			final int dataPoolNum = getNumberOfTestObjectsInDataPool();
'			if (dataPoolNum == 0)
'			{
'				throw new RuntimeException("Cannot create any instance: Data pool is empty.");
'			}
'
'			throw new RuntimeException("Cannot create any instance: Unknown object id "
'			                           + OBJECT_ID + ".");
'		}
'
'		int indexCounter = 0;
'		for (final String id : ids) {
'			if ( id.equals(objectId) )
'			{
'				return indexCounter;
'			}
'			indexCounter++;
'		}
'		
'		return -1;
'	}
'	
'	private static String getValue(final String field, final int index)
'	{
'		final List<String> list = dataPool.get(field);
'		if (list == null)
'		{
'			throw new RuntimeException("Unkown field '" + field + "' in class '${classDescriptor.simpleName}'.");
'		}
'		
'		if (index >= list.size())
'		{
'			return null;  // no value for this index available
'		}
'		
'		return list.get(index);
'	}
'

#set( $useJavaBeanRegistry = $model.getMetaInfoValueFor("useJavaBeanRegistry") )

#if ( $useJavaBeanRegistry == "true" )

	#parse("C_buildObjectMethodWithRegistry.tpl")
	
#else

	#parse("C_buildObjectMethod.tpl")
	
#end


'
'	static int getNumberOfTestObjectsInDataPool()  {
'		final String firstKey = ${classDescriptor.simpleName}Factory.dataPool.keySet().iterator().next();
'		return ${classDescriptor.simpleName}Factory.dataPool.get(firstKey).size();
'	}
'

#parse("G_buildCreateInstanceWithAllSupportedFieldsExceedingMaxLength.tpl")

'

#parse("H_buildCreateInstanceWithAllSupportedFieldsNotReachingMinLength.tpl")		

'

#parse("D_buildDataPool.tpl")

'

#parse("I_buildCreateExampleInstanceMethod.tpl")

'

#parse("J_validateDataPool.tpl")

}