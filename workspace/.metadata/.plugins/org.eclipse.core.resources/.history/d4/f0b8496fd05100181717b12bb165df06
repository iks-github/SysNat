package com.iksgmbh.sysnat.helper;

import java.util.ArrayList;
import java.util.List;

import com.iksgmbh.sysnat.domain.NaturalLanguagePatternPart;
import com.iksgmbh.sysnat.domain.NaturalLanguagePatternPart.NaturalLanguagePatternPartType;

/**
 * Used form LanguageTemplatePattern and LanguageInstructionPattern to
 * split an instruction line into its pattern in order to
 * make templates and instructions easier to compare.
 * 
 * @author Reik Oberrath
 */
public class LanguagePatternParser 
{
	private static final String PARAM_VARIABLE_IDENTIFIER = "'";
	private static final String PARAM_VALUE_IDENTIFIER = "^";
	private static final String RETURN_VALUE_START_IDENTIFIER = "<";
	private static final String RETURN_VALUE_END_IDENTIFIER = ">";
	
	private List<NaturalLanguagePatternPart> patternParts = new ArrayList<>();
	
	public static List<NaturalLanguagePatternPart> doYourJob(final String naturalLanguageLine) 
	{
		LanguagePatternParser languagePatternParser = new LanguagePatternParser();
		languagePatternParser.parse(naturalLanguageLine);
		return languagePatternParser.getPatternParts();
	}

	private List<NaturalLanguagePatternPart> getPatternParts() {
		return patternParts;
	}

	private void parse(final String naturalLanguageLine) 
	{
		final char[] charArray = naturalLanguageLine.toCharArray();
		
		String currentPart = "";
		int parameterCount = 0;
		NaturalLanguagePatternPartType parseModus = NaturalLanguagePatternPartType.DEFAULT;
		for (char c : charArray) 
		{
			if (c == PARAM_VALUE_IDENTIFIER.charAt(0) ) 
			{
				if (parseModus == NaturalLanguagePatternPartType.DEFAULT) 
				{
					addDefaultPart(currentPart);
					currentPart = "";					
					parseModus = NaturalLanguagePatternPartType.PARAM_VALUE;
				} else {
					addParamValuePart(parameterTypes[parameterCount]);
					currentPart = "";					
					parseModus = NaturalLanguagePatternPartType.DEFAULT;
					parameterCount++;
				}
			} 
			else if (c == PARAM_VARIABLE_IDENTIFIER.charAt(0) ) 
			{
				if (parseModus == NaturalLanguagePatternPartType.DEFAULT) 
				{
					addDefaultPart(currentPart);
					currentPart = "";					
					parseModus = NaturalLanguagePatternPartType.PARAM_VARIABLE;
				} else {
					addParamVariablePart(parameterTypes[parameterCount]);
					currentPart = "";					
					parseModus = NaturalLanguagePatternPartType.DEFAULT;
					parameterCount++;
				}
			}
			else if (c == RETURN_VALUE_START_IDENTIFIER.charAt(0) ) 
			{
				addDefaultPart(currentPart);
				currentPart = "";					
				parseModus = NaturalLanguagePatternPartType.RETURN_VALUE;
			} 
			else if (c == RETURN_VALUE_END_IDENTIFIER.charAt(0)) 
			{
				addReturnValuePart(returnType);
				currentPart = "";					
				parseModus = NaturalLanguagePatternPartType.DEFAULT;
			} 
			else 
			{
				currentPart += c;
			}
		}
		
		addDefaultPart(currentPart);
	}
}
