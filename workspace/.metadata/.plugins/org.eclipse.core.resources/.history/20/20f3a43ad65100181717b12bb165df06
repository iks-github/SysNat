package com.iksgmbh.sysnat.helper;

import java.util.ArrayList;
import java.util.List;

import com.iksgmbh.sysnat.domain.NaturalLanguagePatternPart;
import com.iksgmbh.sysnat.domain.NaturalLanguagePatternPart.NaturalLanguagePatternPartType;

/**
 * Used form LanguageTemplatePattern and LanguageInstructionPattern to
 * split an instruction line into its pattern in order to
 * make templates and instructions easier to compare.
 * 
 * @author Reik Oberrath
 */
public class LanguagePatternParser 
{
	private static final String PARAM_VARIABLE_IDENTIFIER = "'";
	private static final String PARAM_VALUE_IDENTIFIER_1 = "^";     // used in templates
	private static final String PARAM_VALUE_IDENTIFIER_2 = "\"";    // used in instructions
	private static final String RETURN_VALUE_START_IDENTIFIER = "<";
	private static final String RETURN_VALUE_END_IDENTIFIER = ">";
	
	private List<NaturalLanguagePatternPart> patternParts = new ArrayList<>();
	private Class<?>[] parameterTypes;
	private Class<?> returnType ;
		
	public LanguagePatternParser(final Class<?>[] parameterTypes, 
			                     final Class<?> returnType) 
	{
		this.parameterTypes = parameterTypes;
		this.returnType = returnType;
	}

	public static List<NaturalLanguagePatternPart> doYourJob(final String naturalLanguageLine, 
			                                                 final Class<?>[] parameterTypes,
			                                                 final Class<?> returnType) 
	{
		LanguagePatternParser languagePatternParser = new LanguagePatternParser(parameterTypes, returnType);
		languagePatternParser.parse(naturalLanguageLine);
		return languagePatternParser.getPatternParts();
	}

	private List<NaturalLanguagePatternPart> getPatternParts() {
		return patternParts;
	}

	private void parse(final String naturalLanguageLine) 
	{
		final char[] charArray = naturalLanguageLine.toCharArray();
		
		String currentPart = "";
		int parameterCount = 0;
		NaturalLanguagePatternPartType parseModus = NaturalLanguagePatternPartType.DEFAULT;
		for (char c : charArray) 
		{
			if (c == PARAM_VALUE_IDENTIFIER_1.charAt(0) || c == PARAM_VALUE_IDENTIFIER_2.charAt(0)) 
			{
				if (parseModus == NaturalLanguagePatternPartType.DEFAULT) 
				{
					addDefaultPart(currentPart);
					currentPart = "";					
					parseModus = NaturalLanguagePatternPartType.PARAM_VALUE;
				} else {
					addParamValuePart(parameterCount);
					currentPart = "";					
					parseModus = NaturalLanguagePatternPartType.DEFAULT;
					parameterCount++;
				}
			} 
			else if (c == PARAM_VARIABLE_IDENTIFIER.charAt(0) ) 
			{
				if (parseModus == NaturalLanguagePatternPartType.DEFAULT) 
				{
					addDefaultPart(currentPart);
					currentPart = "";					
					parseModus = NaturalLanguagePatternPartType.PARAM_VARIABLE;
				} else {
					addParamVariablePart(parameterCount);
					currentPart = "";					
					parseModus = NaturalLanguagePatternPartType.DEFAULT;
					parameterCount++;
				}
			}
			else if (c == RETURN_VALUE_START_IDENTIFIER.charAt(0) ) 
			{
				addDefaultPart(currentPart);
				currentPart = "";					
				parseModus = NaturalLanguagePatternPartType.RETURN_VALUE;
			} 
			else if (c == RETURN_VALUE_END_IDENTIFIER.charAt(0)) 
			{
				addReturnValuePart(returnType);
				currentPart = "";					
				parseModus = NaturalLanguagePatternPartType.DEFAULT;
			} 
			else 
			{
				currentPart += c;
			}
		}
		
		addDefaultPart(currentPart);
	}
	
	private void addDefaultPart(String text) 
	{
		if (text != null && ! text.isEmpty()) {
			patternParts.add(new NaturalLanguagePatternPart(NaturalLanguagePatternPartType.DEFAULT, text));
		}
	}

	private void addParamValuePart(int paramCounter) 
	{
		Class<?> parameterType = null;
		if (parameterTypes != null) {
			parameterType = parameterTypes[paramCounter];
		}
		patternParts.add(new NaturalLanguagePatternPart(NaturalLanguagePatternPartType.PARAM_VALUE, parameterType));
	}

	private void addParamVariablePart(int paramCounter) 
	{
		Class<?> parameterType = null;
		if (parameterTypes != null) {
			parameterType = parameterTypes[paramCounter];
		}
		patternParts.add(new NaturalLanguagePatternPart(NaturalLanguagePatternPartType.PARAM_VARIABLE, parameterType));
	}
	
	
	private void addReturnValuePart(Object returnValueType) {
		patternParts.add(new NaturalLanguagePatternPart(NaturalLanguagePatternPartType.RETURN_VALUE, returnValueType));
	}	
}
