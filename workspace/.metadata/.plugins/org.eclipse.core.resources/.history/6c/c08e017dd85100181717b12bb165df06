package com.iksgmbh.sysnat.domain;

import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.iksgmbh.sysnat.annotation.LanguageTemplate;
import com.iksgmbh.sysnat.domain.NaturalLanguagePatternPart.NaturalLanguagePatternPartType;
import com.iksgmbh.sysnat.exception.SysNatException.ErrorCode;
import com.iksgmbh.sysnat.helper.LanguagePatternParser;
import com.iksgmbh.sysnat.utils.ExceptionHandlingUtil;
import com.sun.org.apache.xalan.internal.xsltc.compiler.Pattern;
import com.sun.xml.internal.ws.api.streaming.XMLStreamReaderFactory.Default;

/**
 * Stores all information about an java method annotated by 'LanguageTemplate'.
 * This information is used for both 
 * - finding match with natural language instructions from nltc files and
 * - building the corresponding java code if a match is found.
 * 
 * @author Reik Oberrath
 */
public class LanguageTemplatePattern 
{
	/**
	 * Name of java file from which this template is read.
	 */
	private Filename containerFileName;
	private String containerFieldName;
	private String methodName;
	private String annotationValue;
	
	private List<NaturalLanguagePatternPart> patternParts;
	private Class<?>[] parameterTypes;
	private Class<?> returnType;
	
	public LanguageTemplatePattern(final Method method, 
			                       final Filename aContainerFileName,
			                       final String aContainerFieldName)
	{
		this.containerFileName = aContainerFileName;
		this.containerFieldName = aContainerFieldName;
		this.methodName = method.getName();
		this.parameterTypes = method.getParameterTypes();
		
		final LanguageTemplate languageTemplate = method.getAnnotation(LanguageTemplate.class);
		annotationValue = languageTemplate.value();
		final char[] charArray = annotationValue.toCharArray();
		
		returnType = method.getReturnType();
		checkAnnotation(method, annotationValue, returnType);
		patternParts = LanguagePatternParser.doYourJob(annotationValue, parameterTypes, returnType);
	}
	

	
	private static void checkAnnotation(final Method method, 
			                            final String annotationValue,
			                            final Class<?> returnType) 
	{
//		if (StringUtils.countOccurrences(annotationValue, LanguagePatternParser.RETURN_VALUE_START_IDENTIFIER)) {
//			
//		}

		/*
		// Check 1
		if (returnType != void.class && !naturalLanguagePattern.contains(RETURN_VALUE_IDENTIFIER + RETURN_VALUE_IDENTIFIER)) {
			ExceptionHandlingUtil.throwClassifiedException(
					ErrorCode.LANGUAGE_TEMPLATE_PARSING__MISSING_RETURN_VALUE_IN_PATTERN, method.getName(),
					naturalLanguagePattern);
		}

		// Check "
		String[] splitResult = naturalLanguagePattern.split(RETURN_VALUE_IDENTIFIER + RETURN_VALUE_IDENTIFIER);
		if (splitResult.length > 2) {
			ExceptionHandlingUtil.throwClassifiedException(
					ErrorCode.LANGUAGE_TEMPLATE_PARSING__DOUBLE_RETURN_VALUE_IN_PATTERN, method.getName(),
					naturalLanguagePattern);
		}

		// Check 3
		final List<String> parameterIdentifier = Arrays.asList(PARAMETER_IDENTIFIER);
		char[] charArray = naturalLanguagePattern.toCharArray();
		int parameterCount = 0;
		for (char c : charArray) {
			if (parameterIdentifier.contains("" + c)) {
				parameterCount++;
			}
		}
		
		if (parameterCount != method.getParameterCount()) {
			ExceptionHandlingUtil.throwClassifiedException(
					ErrorCode.LANGUAGE_TEMPLATE_PARSING__NUMBER_PARAMETER_MISMATCH, method.getName(),
					naturalLanguagePattern);
		}
		*/
	}

	public List<NaturalLanguagePatternPart> getParts() {
		return patternParts;
	}
	
	public int getNumberOfParts() {
		return patternParts.size();
	}

	public NaturalLanguagePatternPart getPart(int i) {
		return patternParts.get(i);
	}

	public String getMethodName() {
		return methodName;
	}
	
	public Filename getContainerFileName() {
		return containerFileName;
	}
	
	public String getContainerFieldName() {
		return containerFieldName;
	}

	public Class<?> getReturnType() {
		return returnType;
	}
	
	public String getMethodInfo() {
		String toReturn = containerFileName + "." + methodName + "(";
		for (Class<?> type : parameterTypes) {			
			toReturn += type.getSimpleName() + ",";
		}
		toReturn = toReturn.substring(0, toReturn.length()-1);
		return toReturn + ")";
	}
	
	@Override
	public String toString() {
		return annotationValue;
	}
	
	public boolean isIdentical(LanguageTemplatePattern otherPattern) 
	{
		boolean toReturn = false;
		
		if (getNumberOfParts() == otherPattern.getNumberOfParts()) 
		{
			toReturn = true;
			
			for (int i=0; i<getNumberOfParts(); i++) 
			{
				if (! getPart(i).isIdentical(otherPattern.getPart(i))) {
					return false;
				}
			}
		}
		
		return toReturn;
	}
	
}
